#include "Helper.cginc"

#pragma kernel ComputeObjectSpaceCutAways
#pragma kernel ComputeLipidObjectSpaceCutAways


uniform StructuredBuffer<CutInfoStruct> _CutInfos;
uniform	StructuredBuffer<float4> _CutScales;
uniform	StructuredBuffer<float4> _CutPositions;	
uniform StructuredBuffer<float4> _CutRotations;
uniform StructuredBuffer<int> _HistogramsLookup;
uniform RWStructuredBuffer<HistStruct> _Histograms;

uniform	StructuredBuffer<float4> _IngredientProperties;	

//uniform StructuredBuffer<int> _ProteinCutFilters;
//uniform StructuredBuffer<int> _HistogramProteinTypes;
//uniform RWStructuredBuffer<int> _HistogramStatistics;

//uniform float noiseTextureW;
//uniform float noiseTextureH;
//uniform Texture2D<float4> noiseTexture;

uniform float _Scale;
uniform	int _NumInstances;
uniform int _NumCutObjects;
uniform	int _NumIngredientTypes;
uniform float3 _CameraForward;

uniform int _WeightThreshold;

float CutAwayTest(float4 sphere, int ingredientType, int id)
{
    bool cut = false;
    for (int i = 0; i < _NumCutObjects; i++)
    {
        CutInfoStruct info = _CutInfos[ingredientType + _NumIngredientTypes * i];
        float3 position = _CutPositions[i].xyz;
        float4 rotation = _CutRotations[i];
		float3 scale = _CutScales[i].xyz;

		float distance = GetSignedDistance(sphere.xyz, info.info.x, position, rotation, scale);
					
		//inverse
		if (info.info.w == 1)
		{
			distance -= sphere.w;
			distance *= -1;
		}
		else
		{
			distance += sphere.w;
		}

		bool test = distance <= 0.0;
		

		bool fuzzTest = true;
		bool adjustTest = true;
		bool adjustVisibilityTest = true;
				
		float adjustCut = -1.0 + info.info.y * 2.0;
		float adjustOcl = -1.0 + info.info.z * 2.0;;

		float pFuzziness = 1.0 - info.info2.x;
		float pSize = info.info2.y;
		float pFuzzinessCurve = info.info2.z;
			
		if (adjustCut > 0 && /*pow(rand(id), 0.5) < adjustCut*/ !AdjustDistanceTest(id, adjustCut, distance, pSize, pFuzziness, pFuzzinessCurve))
		{
			adjustTest = false;
		}

		if (!test && adjustCut < 0 && /*pow(rand(id), 0.5) < -adjustCut*/ !AdjustDistanceTest(id, -adjustCut, distance, pSize, pFuzziness, pFuzzinessCurve))
		{
			test = true;
		}		

		//int atomicWeight = _IngredientProperties[ingredientType].x;
		//if(atomicWeight < _WeightThreshold) test = true;

        if (test /*&& fuzzTest*/ && adjustTest && adjustVisibilityTest)
			cut = cut | true;

		//if (_ProteinInstanceInfo[id].w == 1)
		//{
		//	cut = true;
		//}

		//if (abs(distance) < 20.0 && distance >= 0.0 &&
		//			(	_ProteinInstanceInfo[id.x].x < 31 ||
		//				(info.info.x == 1 && scale.x > 40.0) ||
		//				(_ProteinInstanceInfo[id.x].x > 36 && _ProteinInstanceInfo[id.x].x < 45)
		//			)
		//	)
		//{
		//	float shading = 0.0;

		//	float3 no;

		//	float e = 0.1;

		//	no.x = d(sphere.xyz + float3(e,0.0,0.0), info.info.x, position, rotation, scale) - d(sphere.xyz - float3(e,0.0,0.0), info.info.x, position, rotation, scale);
		//	no.y = d(sphere.xyz + float3(0.0,e,0.0), info.info.x, position, rotation, scale) - d(sphere.xyz - float3(0.0,e,0.0), info.info.x, position, rotation, scale);
		//	no.z = d(sphere.xyz + float3(0.0,0.0,e), info.info.x, position, rotation, scale) - d(sphere.xyz - float3(0.0,0.0,e), info.info.x, position, rotation, scale);

		//	no=normalize(no);

		//	float3 light = normalize(_CameraForward); //float3(0.0, 0.0, 1.0);
		
		//	float3 halfv=normalize(normalize(_CameraForward)+light);
		//	//float ndotl=max(dot(no,halfv),0.0);
		//	float ndotl=abs(dot(no,halfv));
			
		//	shading = max(abs(ndotl),0.5);

		//	_ProteinInstanceInfo[id.x].z *= lerp(shading, 1.0, abs(distance) / 20.0);
		//}            
    }
    return cut;
}

uniform	StructuredBuffer<float> _ProteinRadii;	
uniform	RWStructuredBuffer<float4> _ProteinInstanceInfo;
uniform	StructuredBuffer<float4> _ProteinInstancePositions;	
uniform StructuredBuffer<int> _ProteinInstanceVisibilityFlags;
uniform RWStructuredBuffer<int> _ProteinInstanceCullFlags;

//uniform StructuredBuffer<int> _ProteinInstanceOcclusionFlags;

[numthreads(64,1,1)]
void ComputeObjectSpaceCutAways (uint3 id : SV_DispatchThreadID)
{
	if(id.x >= (uint)_NumInstances) return;

    float4 info = _ProteinInstanceInfo[id.x];
		
	float radius = _ProteinRadii[info.x] * _Scale;
	float3 pos = _ProteinInstancePositions[id.x].xyz * _Scale;	

	float4 sphere = float4(pos, radius);	
		
	bool cutAway = CutAwayTest(sphere, info.x, id.x);
	if(info.w > 0) cutAway = true;
	//cutAway = false;
	_ProteinInstanceCullFlags[id.x] = (cutAway) ? 1 : 0;
		
	int addWhere = _HistogramsLookup[info.x];
	InterlockedAdd(_Histograms[addWhere].all, 1);

	if (cutAway)
	{
		InterlockedAdd(_Histograms[addWhere].cutaway, 1);
	}	

	int isVisible = _ProteinInstanceVisibilityFlags[id.x];
	if(isVisible)
	{
		InterlockedAdd(_Histograms[addWhere].visible, 1);
	}
}
	
uniform StructuredBuffer<float4> _LipidInstanceInfo;	
uniform StructuredBuffer<float4> _LipidInstancePositions;
uniform StructuredBuffer<int> _LipidInstanceVisibilityFlags;
uniform RWStructuredBuffer<int> _LipidInstanceCullFlags;	

[numthreads(64,1,1)]
void ComputeLipidObjectSpaceCutAways (uint3 id : SV_DispatchThreadID)
{
	if(id.x >= (uint)_NumInstances) return;    
		
	float4 info = _LipidInstanceInfo[id.x];	
	float4 sphere = _LipidInstancePositions[id.x] * _Scale;	
		
	bool cutAway = CutAwayTest(sphere, info.x, id.x);
	if(info.w > 0) cutAway = true;
	_LipidInstanceCullFlags[id.x] = (cutAway) ? 1 : 0;
		
	int addWhere = _HistogramsLookup[info.x];
	InterlockedAdd(_Histograms[addWhere].all, 1);

	if (cutAway)
	{
		InterlockedAdd(_Histograms[addWhere].cutaway, 1);
	}	

	int isVisible = _LipidInstanceVisibilityFlags[id.x];
	if(isVisible)
	{
		InterlockedAdd(_Histograms[addWhere].visible, 1);
	}
}